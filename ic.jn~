// ic.jn
WRITE_ON = true;
object.ipc["write"] = function(rq, data) {
    // write 
    if(WRITE_ON) {
        brDOM(); printDOM("Message from "+rq["terminal_id"]+rq["object_uri"]+": "+data.substr(0, 1000)); brDOM(); // the RQ may contain 'username' if we use the right security model..
    }
}

function printDOM( txt ) {
    var x = document.createElement("DIV");
    x.style.display = "inline";
    x.style.fontFamily = "courier";
    var t = document.createTextNode(txt);
    x.appendChild(t);
    document.body.appendChild(x);
    window.scrollTo(0,1000000);
}

function preDOM( txt ) {
    var x = document.createElement("PRE");
    var t = document.createTextNode(txt);
    x.appendChild(t);
    document.body.appendChild(x);
    window.scrollTo(0,1000000);
}


function brDOM() {
    var x = document.createElement("DIV");
    document.body.appendChild(x);
    window.scrollTo(0,1000000);
}


function inputDOM() {
    var x = document.createElement("DIV");
    x.style.display = "inline";
    x.style.fontFamily = "courier";
    x.setAttr("contentEditable", true);
    var t = document.createTextNode("");
    x.appendChild(t);
    document.body.appendChild(x);
    x.focus();
    do {
        e = x.waitEvent("keypress"); // will temporarily bind an event to the node and wait for it (bind_dom method)
                                     // this should be used with caution: there is no event queue for the object and it may miss some events
    } while (e.keyCode != 13)
    x.setAttr("contentEditable", false);
    return x.getAttr("innerHTML");
}


function editDOM() {
    var x = document.createElement("DIV");
    x.style.display = "inline";
    x.style.fontFamily = "courier";
    x.setAttr("contentEditable", true);
    var t = document.createTextNode("");
    x.appendChild(t);
    document.body.appendChild(x);
    x.focus();
    do {
        e = x.waitEvent("keypress"); // will temporarily bind an event to the node and wait for it (bind_dom method)
                                     // this should be used with caution: there is no event queue for the object and it may miss some events
    } while ( !( e.keyCode == 13 && e.ctrlKey == true) )
    x.setAttr("contentEditable", false);
    var s = x.getAttr("innerHTML");
    s = s.replace(/<br>/g, "\n"); // no other tags are allowed
    s = s.replace(/&gt;/g, ">"); // no other special chars allowed
    s = s.replace(/&lt;/g, "<");
    return s;
}

function execChild(childPath, progPath, argv) {
    // TODO: killChild ;-)
    try {
        object.execURI(childPath, "__ic_main", argv); // start in a thread??
    } catch (e) {
        printDOM("ic#: exception at main() in "+progPath+" (progId: "+childPath")"); brDOM(); // TODO HERE
        printDOM(":: "+e); brDOM();
    }
    
}

brDOM();
brDOM();
printDOM("Welcome to ic# - an Interactive Core commandline. Type 'help' for help. Click-TAB to reactivate input (if lost).");
brDOM();
// TODO: write Google Gears hint - if not detected

pc = 0;

var s,c,p1, p2;
while(true) {
    printDOM("ic# ");
    s = inputDOM();
    s = s.split("<br>")[0]; // wipe out system BREAK
    c = s.split(" ")[0];
    switch(c) {
      case "exit":
        printDOM("quitting...");
        object.destroyInstance(); // or process.destroy()? XXX renaimng proposed
        break;
      case "help":
        printDOM("URI locations:");
        brDOM();
        printDOM("  ~ current terminal; . current object; / hub root; .. parent of current object; default /");
        brDOM();      
        printDOM("commands:");
        brDOM();
        printDOM("  ls <URI> - try to list children of the object at <URI>. Example: ls ~/sys");
        brDOM();
        printDOM("  cat <URI> - try to read() the object at <URI> as if it was a ramstore-like object.");
        brDOM();
        printDOM("  typeto <URI> - write() the text typed next, to specified <URI> ramstore object, create if nesessary. You may also type to another ic# console: like typeto /mycomp/console");
        brDOM();
        
        
        printDOM("  delete <URI> - call deleteChild on ramstore");
        brDOM();


        printDOM("  copy <From-URI> <To-URI> - perform a bytecopy of a ramstore");
        brDOM();

        printDOM("  link <What-URI> <As-URI> - link an object URI creating a 'link' child at <As-URI>");
        brDOM();

        printDOM("  register <name> <key> <identity info> - register a terminal at HUB");
        brDOM();

        printDOM("  auth <name> <key>  - authenticate a terminal at HUB");
        brDOM();

        
        printDOM("  version - print detailed system version information");
        brDOM();

         
        // write() IPC method: used to notify of events; HUB Connected: termname; HUB connection lost
        // 
        // ipc - arbitrary ipc method caller
        // create - arbitrary child object creation
        // edit - simple <pre> editor 
        // readlog - show ErrorConsole log
        // set ... - set various ic# parameters: write allow, app search PATH
        // ping URI - time the exception callback; periodically (1s interval)


        // xedit - highlighting text editor; determine filetype by name/ext or by mimetype, if any returned
        break;
      case "version":
        printDOM("Version ic# 0.0.1 pre-alpha; registered as "+object.getMyURI() + "; Running on kernel version "+object.version);
        brDOM();
        break;
      case "ls":
        if( s.split(" ")[1] ) p1 = s.split(" ")[1];
        else p1 = "~";
        // TODO!!! p1 = s.split(" ")[1] || p1; does not work (evals to bool) for unknown reason!
        try {
            ldata = execURI(p1, "listChildren", []);
            printDOM("List of objects at '"+p1+"':"); brDOM();
            for(var i=0; i<ldata.length; i++) {
                printDOM(ldata[i]); brDOM();
            }
        } catch (e) {
            printDOM("ls: fetch failed with: "+e); brDOM();
        }
        break;
      case "cat":
        p1 = s.split(" ")[1];
        if(!p1) {
            printDOM("cat: not enough arguments"); brDOM();
            break;
        }
        try {
            data = execURI(p1, "read", []);
            preDOM(data);
        } catch (e) {
            printDOM("cat: fetch failed with: "+e); brDOM();
        }     
        break;   

      case "delete":
        p1 = s.split(" ")[1];
        if(!p1) {
            printDOM("delete: not enough arguments"); brDOM();
            break;
        }
        try {
                lURI=p1.split("/");
                oname = lURI[(lURI.length-1)];
                lURI.pop();
                oparent = lURI.join("/");
                //printDOM("Creating "+oname+" at "+oparent); brDOM();
                execURI(oparent, "deleteChild", [oname]);
        } catch (e) {
            printDOM("delete: failed with: "+e); brDOM();
        }     
        break;   

      case "typeto":
        p1 = s.split(" ")[1];
        if(!p1) {
            printDOM("typeto: not enough arguments"); brDOM();
            break;
        }

        printDOM("Input text; type CTRL-Enter to stop:"); brDOM();
        p2 = editDOM();
        brDOM();
 
        try {
            execURI(p1, "write", [p2], 20000);
        } catch (e) {
            printDOM("typeto: write() failed with: "+e+"; trying to create ramstore instead"); brDOM();
            try {
                // get name and get parent
                lURI=p1.split("/");
                oname = lURI[(lURI.length-1)];
                lURI.pop();
                oparent = lURI.join("/");
                //printDOM("Creating "+oname+" at "+oparent); brDOM();
                execURI(oparent, "createChild", [oname, "~/sys/ramstore", "~/sys/anarchic"], 20000);
                execURI(p1, "write", [p2], 20000);
            } catch (e) {
                printDOM("typeto: failed with: "+e); brDOM();
            }
        }     

        
        break;
      
      case "copy":
        p1 = s.split(" ")[1];
        p2 = s.split(" ")[2];
        if(!p1 || !p2) {
            printDOM("copy: not enough parameters"); brDOM();
            break;
        }

        try {
            data = execURI(p1, "read", []);
        } catch (e) {
            printDOM("copy: object read failed with: "+e); brDOM();
            break;
        }
        
        try {
            execURI(p2, "write", [data], 20000);
        } catch (e) {
            printDOM("copy: trying to create new ramstore"); brDOM();
            try {
                lURI=p2.split("/");
                oname = lURI[(lURI.length-1)];
                lURI.pop();
                oparent = lURI.join("/");
                execURI(oparent, "createChild", [oname, "~/sys/ramstore", "~/sys/anarchic"]);
                execURI(p2, "write", [data]);
            } catch (e) {
                printDOM("typeto: failed with: "+e); brDOM();
            }
        }     

        
        break;

      case "link":
        p1 = s.split(" ")[1];
        p2 = s.split(" ")[2];
        if(!p1 || !p2) {
            printDOM("link: not enough parameters"); brDOM();
            break;
        }
        
        lURI=p2.split("/");
        oname = lURI[(lURI.length-1)];
        lURI.pop();
        oparent = lURI.join("/");
        
        try {
            execURI(oparent, "addAsChild", [ oname, p1]);
        } catch (e) {
            printDOM("link: object link failed with: "+e); brDOM();
            break;
        }
        
        break;

      case "register":
        p1 = s.split(" ")[1];
        p2 = s.split(" ")[2];
        var p3 = s.split(" ")[3]; // TODO: need multi-word support. like braces or smth?
        if(!p3) p3 = "";
        if(!p1 || !p2 || !p3) {
            printDOM("register: not enough parameters"); brDOM();
            break;
        }
        
        
        try {
            execURI("/", "register", [ p1, p2, p3 ], 20000);
        } catch (e) {
            printDOM("register: failed with: "+e); brDOM();
            break; // does not break out...
        }
        printDOM("register OK"); brDOM();
        break;


      case "auth":
        p1 = s.split(" ")[1];
        p2 = s.split(" ")[2];
        if(!p1 || !p2 ) {
            printDOM("auth: not enough parameters"); brDOM();
            break;
        }
        
        
        try {
            execURI("/", "auth", [ p1, p2 ], 20000);
        } catch (e) {
            printDOM("auth: failed with: "+e); brDOM();
            break; // does not break out...
        }
        printDOM("auth OK"); brDOM();
        break;
      
      
      case "":
        break;
      
      default:
        // TODO: search for commands at PATH?
        argv = s.split(" ");
        //p1.shift(); // pass a full array to main

        try {
            pc++;
            
            var xd = document.createElement("DIV");
            xd.style.width="100%";
            xd.style.fontSize="100%";
            document.body.appendChild(xd);    
            object.createChild("p"+pc, c, "~/sys/anarchic", xd); // TODO: use real default security!!
            
            var pid = start_new_thread(execChild, ["./"+pname, "p"+pc, argv]); // use pid??

        } catch (e) {
            // BUG prevents us to use break; here
            if(e.toString().indexOf("path") > -1) {
                printDOM("command not found by path: "+c); brDOM();
                break; // does not break out...                
            } else {
            }
            
        }

        
    }
}
