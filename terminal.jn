// eos-init.js
// main jEOS3 initialization routine;
// it is a terminal object code

// we assume that we're attached to a DOM node

// the main terminal method, should never be called directly
// since it passes on the request object's properties
// anyways none of the IPC methods are intended for running from inside the vm....
// XXX this is shit and is used just as a temporary 'fast solution'
function _ipc_createObject(rq, name, typeURI, secURI, DOMElement) {
    // TODO TODO: security here - watch for rq - only sys rq is allowed!
    // now, do get the code
    code = execURI(typeURI, "read", []);
    sec = execURI(secURI, "read", []);
    // WARNING! potential security issue here! -> typeURI&secURI may be altered by an object...
    //          this needs a rewrite!
    return __createObject(name, code, sec, rq.object_uri, typeURI, secURI, DOMElement); // will now create the wrapper object; attached to DOM
}
object.ipc["createObject"] = _ipc_createObject;


function ipc_listChildren(rq) {
    return object.enumerateChildren(); // will return an Array object
}
object.ipc["listChildren"] = ipc_listChildren;

// get some server data anonymously (luckily we know the location ;-)
// TODO: a native method for this shit... 
// LATER
// eval(execURI("jeos3/bin/basic_auth", "read", [])); // will load "eos_authenticate" method


// some required global variables for a terminal
//my_terminal = "Test/Alpha";

// TODO: rewrite eos_authenticate inline!
//my_username = eos_authenticate(my_terminal); // wait for input in blocking mode (?!?! raw_input method -- see below)
                    // NEED routines to create blocking methods out of non-blocking (??easy: sleep until a value received)
                    //      this involves elementary semaphores I think... (waitTrue ?? or alike)
                    // this will create editable field in document.body and attach to keyPress (13) event
                    // then issue to enter login (or leave blank to register new user)
                    // then do some auth AJAX to server, then (if auth succeeds) set our credentials (XXX HOW???)
                    // also establish server 'Comet' connection

//my_terminalURI = comet_connect(); // connect to default comet HUB port; issuing our terminal name (unique username)
                 // the HUB is able to change our name (assign username#N) in case we're connected via several terminals
                 // XXX note that "#" SHOULD NOT BE ALLOWED FOR username in this case !!!
                 // XXX comet connection is mandatory for EOS so this call will just GET the new terminal name
                 //     in case it has been altered to support several logins

//execURI("/jeos3/home/"+my_username+"/terminal", "regAsChild", [my_(terminal)_name, my_uri]); // register caller object as a child...

// directly load a console into a new object (the user must authenticate first)


// run ic# - a multi-call binary
//ErrorConsole.log("sleeping 5 secs...");
//sleep(5000);
ErrorConsole.log("creating dom DIV");
document.body.appendChild(document.createTextNode("starting..."));
xd = document.createElement("DIV");
xd.style.width="100%";
xd.style.fontSize="100%";
document.body.appendChild(xd);


ErrorConsole.log("running crech");

/*

terminal: 
  - run init from KCONFIG - typically some home autorun script. 
  - if failed, run init2 from KCONFIG 
  - ~/var/init
//  - /sys/ic 
  - ~/sys/ic - ic is a basic software piece available in any configuration as a ramstore object code

*/

// XXX SECURITY MODEL!!
ok = false;
try {
    object.createChild("init", object.kconfig("init"), "~/sys/anarchic", xd);
    ok = true;
} catch (e) {
    try {
        object.createChild("init", object.kconfig("init2"), "~/sys/anarchic", xd);
        ok = true;
    } catch (e) {
        // TODO: error reporting here!!! in case SMTH not available, etc! //  TODO: TEST it without sleep!
        try {
            object.createChild("init", "~/var/init", "~/sys/anarchic", xd); 
            ok = true;
        } catch (e) {
            object.createChild("init", "~/sys/ic", "~/sys/anarchic", xd); // this may not fail
            ok = true;
        }
    }
}

// TODO: createChild to return a value??
if(ok) {
    // TODO: pass other serializer methods to init..
    object.kbind("init", {getSerializeObj : object.getSerializeObj, serializeURI: object.serializeURI}, ["autorestore", "saveinterval", "autoswapout"], ["autorestore", "autoswapout"]);
}

// TODO: do announce with new credentials if the hubConnectionChanged hook is received
//       this is rather a terminal issue!

// now register our terminal methods
// (no methods 

