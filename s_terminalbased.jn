// Terminal-Based security module

security.state = {
   ipcIn: "inherit"
}

// first, reattach fetchUrl & load to security
security.fetchUrl = fetchUrl;
security.load = load;
delete fetchUrl;
delete load;

security.setSecurityState = function (state) {
    delete state.inheritParent;
    this.state = state; // no checks
    if(this.object.isSerialized()) this.object.serialize();
    wakeupIPCLock.release();
};

security.getSecurityState = function() {
    return this.state;
};

security.checkInherit = function (rq) {
    if(this.state.inheritParent) return this.object.execIPC(this.state.inheritParent, "validateRequest", [rq]).result;
    var lp = this.object.getMyURI().split("/")
    lp.pop();
    var d = this.object.execIPC(lp.join("/"), "validateRequest", [rq]);
    this.state.inheritParent = d.inheritParent;
    return d.result;
}

security.validateRequest = function (rq) {
    //if(rq.method === "validateRequest" && rq.caller_uri.indexOf(this.object.getMyURI()) != -1) return true;
    // allow all local requests, making the above unnesessary
    if(rq.terminal_id = "~") return true;
    return security.ipc.validateRequest(null, rq).result;
};

security.ipc.validateRequest = function(obj, rq) {
    if(this.state.ipcIn === "inherit") return {result: this.checkInherit(rq), inheritParent: this.state.inheritParent};
    else if(this.state.ipcIn.hasOwnProperty(rq.method)) {
        if(this.state.ipcIn[rq.method] === "inherit") return {result: this.checkInherit(rq), inheritParent: this.state.inheritParent};
        // now check if terminal_id given is in either our list or ACL
        var acls = [];
        for(var i=0;i<this.state.ipcIn[rq.method]; i++) {
            if(this.state.ipcIn[rq.method][i] == rq.terminal_id) return {result: true, inheritParent: this.object.getMyURI()};
            if(this.state.ipcIn[rq.method][i].charAt(0) == "#") acls.push(this.state.ipcIn[rq.method][i]);
        }
        // if we reached here, send validation request to ACL object
        return {result: this.object.execIPC("~/security/ACL", "validate", [rq.terminal_id, acls]), inheritParent: this.object.getMyURI()};
    } else return {result: false, inheritParent: this.object.getMyURI()};
    // never reached.
};

security.ipc.securityGet = security.getSecurityState;
security.ipc.securitySet = function(rq, newState) {
    this.setSecurityState(newState);
};

security.ipc.securityFlushCache = function () {
    delete this.state.inheritParent;
    if(this.object.isSerialized()) this.object.serialize();
};

delete security; // detach from global...