// ic lib jn
// can be safely renamed to iclib.jn and stored as /lib/iclib

object.ipc["__ic_main"] = function(rq, argv) {
    // execute main thread in blocking mode; destroy instance after that DOC
    delete object.ipc["__ic_main"]; // hence only one single IPC allowed; race conditions may still occur but are not taken into account
    main(argv);
    // TODO: detach DOM first
    //      or it will be deleted with object destroy!
    object.destroy(); // a little messy here' but should work -> deleting ourself actually before returning the value 
}

function printDOM( txt ) {
    var x = document.createElement("DIV");
    x.style.display = "inline";
    x.style.fontFamily = "courier";
    var t = document.createTextNode(txt);
    x.appendChild(t);
    document.body.appendChild(x);
    window.scrollTo(0,1000000);
}

function preDOM( txt ) {
    var x = document.createElement("PRE");
    var t = document.createTextNode(txt);
    x.appendChild(t);
    document.body.appendChild(x);
    window.scrollTo(0,1000000);
}


function brDOM() {
    var x = document.createElement("DIV");
    document.body.appendChild(x);
    window.scrollTo(0,1000000);
}


function inputDOM() {
    var x = document.createElement("DIV");
    x.style.display = "inline";
    x.style.fontFamily = "courier";
    x.setAttr("contentEditable", true);
    var t = document.createTextNode("");
    x.appendChild(t);
    document.body.appendChild(x);
    x.focus();
    do {
        e = x.waitEvent("keypress"); // will temporarily bind an event to the node and wait for it (bind_dom method)
                                     // this should be used with caution: there is no event queue for the object and it may miss some events
    } while (e.keyCode != 13)
    x.setAttr("contentEditable", false);
    return x.getAttr("innerHTML");
}


function editDOM(text) {
    // var text = text || "";
    if(typeof text == "undefined") text = "";
    var x = document.createElement("DIV");
    //x.style.display = "inline"; // only BLOCKed elements support innerText
    x.style.fontFamily = "courier";
    x.setAttr("contentEditable", true);
    //var t = document.createTextNode(text);
    //x.appendChild(t);
    x.setAttr("textContent", text);
    document.body.appendChild(x);
    x.focus();
    do {
        e = x.waitEvent("keypress"); // will temporarily bind an event to the node and wait for it (bind_dom method)
                                     // this should be used with caution: there is no event queue for the object and it may miss some events
    } while ( !( e.keyCode == 13 && e.ctrlKey == true) )
    x.setAttr("contentEditable", false);

    var s = x.getAttr("innerHTML");
    s = s.replace(/<br>/g, "\n"); // no other tags are allowed
    s = s.replace(/&gt;/g, ">"); // no other special chars allowed
    s = s.replace(/&lt;/g, "<");
    s = s.replace(/&nbsp;/g, " "); // TABs are auto converted to nbsp's at least in FF
    s = s.replace(/&amp;/g, "&");

    //var s = x.getAttr("textContent");
    return s;
}

initIPCLock.release();// = false; // XXX
