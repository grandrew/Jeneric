// LICENSE: GPL v.3 or later (C) 2010 Andrew Gryaznov realgrandrew@gmail.com, a.gryaznov@svoyaset.ru
// total init for jeneric project
// initIPCLock = true; // XXX not needed since security DOES NOT set initIPCLock to false by itself!

// initialize the serializer
// create the serializer daemon threads

s_working = false;

function do_serialize_all() {
        if(s_working) return; // many race conditions
        
        s_working = true; // is not even atomic
        var i = 0;
        for(var j = 0; j<object.getSerializeLength(); j++) {
            suri = object.getSerializeObj(i); // to not check every 5 secs...
            while (suri) {
                    try {
                        ErrorConsole.log("s_agent: saving "+suri);
                        object.serializeURI(suri, true);
                        // if success
                        //ErrorConsole.log("s_agent: success, deleting "+suri);
                        object.delSerializeObj(suri);
                    } catch (e) {
                        ErrorConsole.log("requested serialization of '"+suri+"' failed with exception: "+e);
                    }
                    //ErrorConsole.log("s_agent: now doing for "+i);
                    suri = object.getSerializeObj(++i);
            }
        }
        s_working = false;
}


function s_agent() {
    ErrorConsole.log("Starting s_agent");
    var suri, i;
    while(true) {
        // swapout is done automatically... so we only need to periodically serialize
        // TODO: watch for fails
        // TODO: 'release' priorititzation
        // rename the conventions: 'weak' is object to be released, 'save' is object to be serialized
        if(!s_working) do_serialize_all();
        sleep(object.kconfig("saveinterval")); // 5-second interval?
    }
}

// now run init tasks from /sys/init ramdir
// DOC this
objs = [];
try {
    objs = execURI("/conf/init", "listChildren", []);
} catch (e) {
    ErrorConsole.log("totinit: running /conf/init/* "+e);
}

var i=0;
for(i=0; i<objs.length; i++) {
    object.createChild(objs[i], "/conf/init/"+objs[i], "~/sys/anarchic", document.body); // TODO: localSecurity instead of anarchic
}

// the workaround for working init + ic as default init
if(i == 0) {
    // TODO: IC# should not come in kernel distribution; load it dynamically!
    //        either from server or from locally stored object in /var...
    ErrorConsole.log("totinit: nothing to run! launching reserved IC#");

    object.createChild("console", "~/sys/ic", "~/sys/anarchic", document.body); 
}
// and finally create init folder and this init at /sys/init location (folder-store!!)

// first, set autorestore to true
function start_s_agent ( rq ) {
    if(object.serializeURI) {
        object.kconfig("autorestore", true); // currently se assume that (de)serialization is always preferrable
        object.kconfig("autoswapout", true);
        start_new_thread(s_agent);
        object.register_serializer(do_serialize_all); // does not actually work very well: requires another normal timeout pass for newly created ramstores
    } else {
        ErrorConsole.log("not starting s_agent; no serialization available");
    }
}

object.ipc["start_s_agent"] = start_s_agent;

initIPCLock.release();// = false;
