// ramstore.jn
// LICENSE: GPL v.3 or later (C) 2010 Andrew Gryaznov realgrandrew@gmail.com, a.gryaznov@svoyaset.ru
// TODO: error checking everywhere!!
// no! dont init it here!
// object.data.data = "";
if(!object.data.data) object.data.data = ""; // init data if not

// XXX THESE ARE IGNORED BY TQLW principle XXX
function getState() {
    return object.data;
}

function setState(data) {
    object.data.data = data.data;
}
// XXX END XXX


function read(rq, offset, len) {
    // TODO: error checking?
    //ErrorConsole.log("ramstore: returning data: "+sdata.substr(offset, len) + " params: "+offset+" l "+len);
    if(!offset) offset = 0;
    if(!len) len = object.data.data.length;
    return object.data.data.substr(offset, len);
}

function write(rq, data, offset) {
    // TODO: error checking?
    if(typeof offset != "undefined") {
        if(offset == -1) {
            object.data.data = object.data.data.concat(data.wrappedString);
            object.release(); // save and release
            return true;
        }
        object.data.data = "".concat(object.data.data.substr(0, offset), data, object.data.data.substr(offset+data.length, object.data.data.length));
    } else {
        object.data.data = data;
    }
    object.release(); // save and release
    return true;
}

function ipc_addAsChild(rq, name, uri) {
    // add as child the object of uri URI named name
    object.linkChild(name, uri);
    object.release(); // save and release
}

function ipc_createChild(rq, name, type, sec) {
    object.createChild(name, type, sec); // create without any DOM binding!! (of course)
    object.release(); // save and release
}

function ipc_deleteChild(rq, name) {
    object.deleteChild(name);
    object.release(); // save and release
}

function ipc_listChildren(rq) {
    return object.enumerateChildren(); // will return an Array object
}

object.ipc["read"] = read;
object.ipc["write"] = write;
object.ipc["addAsChild"] = ipc_addAsChild;
object.ipc["createChild"] = ipc_createChild;
object.ipc["deleteChild"] = ipc_deleteChild;
object.ipc["listChildren"] = ipc_listChildren;

//if(!wakeupIPCLock) object.release(); // mark that we can release safely // we dont want to save uninitialized file; only after write()!

if(!wakeupIPCLock.check()) object.release(); // mark that we can release safely // we dont want to save uninitialized file; only after write()!

// TODO: this should be set in security method ??? WHY??
//       as well as wakeupIPCLock (in setSecurityState())
initIPCLock.release();// = false; // ready for IPC...
