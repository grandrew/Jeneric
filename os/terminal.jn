// LICENSE: GPL v.3 or later (C) 2010 Andrew Gryaznov realgrandrew@gmail.com, a.gryaznov@svoyaset.ru

function _ipc_createObject(rq, name, typeURI, secURI, DOMElement) {
    // TODO TODO: security here - watch for rq - only sys rq is allowed!
    // now, do get the code
    code = execURI(typeURI, "read", []);
    sec = execURI(secURI, "read", []);
    // WARNING! potential security issue here! -> typeURI&secURI may be altered by an object...
    //          this needs a rewrite!
    return __createObject(name, code, sec, rq.object_uri, typeURI, secURI, DOMElement); // will now create the wrapper object; attached to DOM
}
object.ipc["createObject"] = _ipc_createObject;


function ipc_listChildren(rq) {
    return object.enumerateChildren(); // will return an Array object
}
object.ipc["listChildren"] = ipc_listChildren;

// now methods for child object creation
function ipc_addAsChild(rq, name, uri) {
    // add as child the object of uri URI named name
    object.linkChild(name, uri);
    object.serialize();
}

function ipc_createChild(rq, name, type, sec) {
    object.createChild(name, type, sec); // create without any DOM binding!! (of course)
    object.serialize();
}

function ipc_deleteChild(rq, name) {
    object.deleteChild(name);
    object.serialize();
}
object.ipc["addAsChild"] = ipc_addAsChild;
object.ipc["createChild"] = ipc_createChild;
object.ipc["deleteChild"] = ipc_deleteChild;

function ipc_hubConnectionChanged(rq, name) {
    // set the kconfig terminal_id value. Nothing else seems to be required :-\
    object.kconfig("terminal_id", name);
}
object.ipc["hubConnectionChanged"] = ipc_hubConnectionChanged;


function ipc_authterminal(rq, name, key) {
    execURI("/", "auth", [ name, key ], 20000);
    // all went ok..
    object.kconfig("terminal_id", name);
    object.kconfig("terminal_key", key);
}
object.ipc["auth"] = ipc_authterminal;

function ipc_logout_terminal(rq) {
    execURI("/", "logout", [ ], 20000);
    // all went ok..
    //object.kconfig("terminal_id", );
    object.kconfig("terminal_key", null);
}
object.ipc["logout"] = ipc_logout_terminal;


initIPCLock.release();// = false;

ErrorConsole.log("creating dom DIV");
xd = document.createElement("DIV");
xd.style.width="100%";
xd.style.fontSize="100%";
document.body.appendChild(xd);
xd.appendChild(document.createTextNode("starting...  License: GPL v.3 - see details in the documentation"));


/*

terminal: 
  - run init from KCONFIG - typically some home autorun script. 
  - if failed, run init2 from KCONFIG 
  - ~/var/init
//  - /sys/ic 
  - ~/sys/ic - ic is a basic software piece available in any configuration as a ramstore object code

*/

// XXX SECURITY MODEL!!
ok = 0;
/*try {
    ok = object.createChild("init", object.kconfig("init"), "~/sys/anarchic", xd);
} catch (e) {
    try {
        ok = object.createChild("init", object.kconfig("init2"), "~/sys/anarchic", xd);
    } catch (e) {
        // TODO: error reporting here!!! in case SMTH not available, etc! //  TODO: TEST it without sleep!
*/
        try {
            ok = object.createChild("init", "~/sys/init", "~/sys/anarchic", xd); // XXX or /var/init??
        } catch (e) {
            ok = object.createChild("init", "~/sys/ic", "~/sys/anarchic", xd); // this may not fail
        }
/*
    }
}
*/
if(ok) {
    // XXX maybe bind terminal to init?
    object.kbind("init", ["bind_serial"], ["autorestore", "saveinterval", "autoswapout"], ["autorestore", "autoswapout"]);
    object.execURI("./init", "start_s_agent", []);
    xd.removeChild(xd.firstChild);
} else {
    ErrorConsole.log("PANIC: could not start init. Try passing init= kernel parameter.");
}

// TODO: do announce with new credentials if the hubConnectionChanged hook is received
//       this is rather a terminal issue!
