// LICENSE: GPL v.3 or later (C) 2010 Andrew Gryaznov realgrandrew@gmail.com, a.gryaznov@svoyaset.ru
// ic.jn
// TODO: auto-hide closebox
WRITE_ON = true;
OutTo = document.body;
object.ipc["write"] = function(rq, data) {
    // write 
    if(WRITE_ON) {
        brDOM(); printDOM("Message from /"+rq["terminal_id"]+rq["caller_uri"].slice(1)+": "+data.substr(0, 1000)); brDOM(); // the RQ may contain 'username' if we use the right security model..
    }
}

function CommandHistory() {
    this.ch = [""];
    this.MAXLEN = 100;
    this.index = 0;
}
CommandHistory.prototype.add = function (cmd) {
    this.ch.pop();
    this.ch.push(cmd);
    this.ch.push("");
    if(this.ch.length > this.MAXLEN) this.ch.shift();
    this.index = 0;
};
CommandHistory.prototype.get = function (indx) { // safe get
    if(typeof(indx) == "undefined") {
        if(this.index >= this.ch.length) this.index=this.ch.length-1;
        if(this.index < 0) this.index=0;
        indx = this.index;
    }
    return this.ch[this.ch.length-(1+indx)];
};
CommandHistory.prototype.set = function (value, index) { // safe get
    if(typeof(index) == "undefined") {
        if(this.index >= this.ch.length) this.index=this.ch.length-1;
        if(this.index < 0) this.index=0;
        index = this.index;
    }
    this.ch[this.ch.length-(1+index)] = value;
};
CH = new CommandHistory();

object.ipc["listChildren"] = function (rq) {
    return object.enumerateChildren(); // will return an Array object
}

function printDOM( txt ) {
    var x = document.createElement("DIV");
    x.style.display = "inline";
    x.style.fontFamily = "courier";
    var t = document.createTextNode(txt);
    x.appendChild(t);
    OutTo.appendChild(x);
    window.scrollTo(0,1000000);
}

function preDOM( txt ) {
    var x = document.createElement("PRE");
    var t = document.createTextNode(txt);
    x.appendChild(t);
    OutTo.appendChild(x);
    window.scrollTo(0,1000000);
}


function brDOM() {
    var x = document.createElement("DIV");
    OutTo.appendChild(x);
    window.scrollTo(0,1000000);
}

function insertCurrent(el, txt) {
    var x = document.createElement("DIV");
    //x.style.display = "inline";
    x.style.fontFamily = "courier";
    var t = document.createTextNode(txt);
    x.appendChild(t);
    el.parentNode.insertBefore(x, el);
    window.scrollTo(0,1000000);
}

function inputDOM() {
    var x = document.createElement("INPUT");
    x.style.display = "inline";
    x.style.fontFamily = "courier";
    x.style.fontSize = "100%";
    x.style.width = "60%";
    x.style.border = "0px none"; 
    x.style.outline = "0"; // WebKit fix
    OutTo.appendChild(x);
    x.focus();    
    // now history part...
    var history_back = function history_back (e) {
        if(e.keyCode == 38) { // up
            CH.set(x.value);
            CH.index++;
            x.value = CH.get();
        } else if (e.keyCode == 40) { // down            
            CH.set(x.value);
            CH.index--;
            x.value = CH.get();
        } else if (e.keyCode == 9) { // tab
            var v=x.value.split(" ").pop();
            if(v.charAt(0) == "/" || v.charAt(0) == "~") {
                // now get data
                var lURI=v.split("/");
                var oname = lURI.pop();
                var oparent = lURI.join("/");
                x.style.backgroundColor="#e6e6e6";
                try {
                    var ldata = execURI(oparent, "listChildren", [], 2000);
                    //var ss = "/"+ldata.join("/\n/")+"/";
                    var ss = ldata.join("\n");
                    if(oname.length > 0) {
                        var re = new RegExp("^("+oname+".+)", "gm");
                        var m = ss.match(re);
                        //var m = re.exec(ss);
                        if(m && m.length == 1) {
                            x.value = x.value.replace(v, oparent+"/"+m[0]);
                        } else if (m && m.length > 1) {
                            insertCurrent(x, m.join(" "));
                        } else {
                            //insertCurrent(x, ss);
                        }
                    } else {
                        insertCurrent(x, ss);
                    }
                } catch (e) {
                    ErrorConsole.log(e); // todo remove this
                }
                x.style.backgroundColor="white"; // TBD: "normal" color?
            }
        }
    };
    x.addEventListener("keydown", history_back, false, true);
    
    // ----
    
    
    do { // the loop is entirely unnesessary here
        e = x.waitEvent("keydown", 0, {"keyCode": [13, 9]}, true); // will temporarily bind an event to the node and wait for it (bind_dom method)
                                     // this should be used with caution: there is no event queue for the object and it may miss some events
    } while (e.keyCode != 13)
    
    x.removeEventListener("keydown", history_back);
    x.readOnly=true;
    var x2 = document.createElement("DIV");
    x2.style.display = "inline";
    x2.style.fontFamily = "courier";
    var v = x.value;
    var t = document.createTextNode(v);
    x2.appendChild(t);
    x.parentNode.replaceChild(x2,x);
    CH.add(v);
    brDOM();
    return v;
}


function editDOM(txt) {
    if(typeof txt == "undefined") txt = "";
    var x = document.createElement("DIV");
    x.style.display = "inline";
    x.style.fontFamily = "courier";
    x.style.outline = "0";
    x.contentEditable = true;
    var t = document.createTextNode(txt);
    x.appendChild(t);
    OutTo.appendChild(x);
    x.focus();
    //do {
        e = x.waitEvent("keydown",0, {"keyCode": 13, "ctrlKey" : true }); // will temporarily bind an event to the node and wait for it (bind_dom method)
                                     // this should be used with caution: there is no event queue for the object and it may miss some events
    //} while ( !( e.keyCode == 13 && e.ctrlKey == true) )
    x.contentEditable = false;
    var s = x.innerHTML;
    s = s.replace(/<br>|<\/p>/g, "\n"); // no other tags are allowed
    s = s.replace(/&gt;/g, ">"); // no other special chars allowed
    s = s.replace(/&lt;/g, "<");
    s = s.replace(/&nbsp;|<p>/g, " ");
    s = s.replace(/&amp;/g, "&");
    return s;
}

function execChild(childPath, progPath, argv) {
    // TODO: killChild ;-)
    try {
        object.execURI(childPath, "__ic_main", [argv]); // start in a thread??
    } catch (e) {
        printDOM("ic#: exception at main() in "+progPath+" (progId: "+childPath + ") - delete stale object manually!"); brDOM(); // TODO HERE
        printDOM(":: "+e); brDOM();
    }
    
}

function set_param_box (el) {
    el.style.border="1px dotted white";
    el.style.width = "100%";
    el.onmouseover = param_box_on;
    el.onmouseout = param_box_off;
    var d = document.createElement("DIV");
    //d.innerHTML = "<button>X</button>";
    
    el.appendChild(d);
    //need more fixes for FF, Opera, others.. for 'float' tag
    d.style.cssFloat = "right";// TODO: need to fix IE!
    d.style.styleFloat = "right";// this is IE way! DOC: currenty we dont fix css
    d.style.visibility = "hidden";
    
    d.innerHTML = "x";
    d.style.cursor = "pointer";
    d.style.fontFamily = "arial";
    d.style.fontSize = "10px";
    d.style.paddingRight = "5px";
    
    d.onclick = close_click;
    
    el.closeButton = d;
    d.onmouseover = param_box_on;
    d.onmouseout = param_box_off;
}
function close_click(e) {
    if(this.parentNode.prog) {
        try {
            if(conform_st) execURI("~/run", "deleteChild", [this.parentNode.prog]);
            else object.deleteChild(this.parentNode.prog);
        } catch (e) {
            ErrorConsole.log("IC: failed to remove child: "+e);
        }
    }
    //if(this.parentNode.onmouseout)
        this.parentNode.parentNode.removeChild(this.parentNode);
}
function param_box_on(e) {
    if(this.closeButton && this != this.parentNode.lastChild) { 
        this.style.borderColor = "#c0c0c0";
        this.closeButton.style.visibility="visible";
    } 
}

function param_box_off(e) {
    if(this.closeButton) { 
        //if((e.relatedTarget != null) && (e.target != null)) ErrorConsole.log(e.target.compareDocumentPosition(e.relatedTarget));
        if((e.relatedTarget != null) && (e.target != null) && !(e.target.compareDocumentPosition(e.relatedTarget) & 0x10)) {
            this.style.borderColor = "white";
            this.closeButton.style.visibility="hidden";
        }
    } 
}

//document.body.innerHTML = "";
box = document.createElement("DIV");
set_param_box(box);
document.body.appendChild(box);
OutTo = box;
crun = object.kconfig("run")
if(!crun) printDOM("Welcome to ic# - an Interactive Commandline. Type 'help' for help.");
brDOM();
// TODO: write Google Gears hint - if not detected
/*
if(!object.FixedStorage && !crun)
{  
    printDOM("Google Gears not installed. Reduced functionality mode. Please check http://gears.google.com/");
    brDOM();
}
*/
// IC# will try to act like an installer when finds there is no '~/run' object
conform_st = false; // conform to ST (security terminal)
if(object.getMySecurityURI() == "~/security/terminal") {
    try {
        l = execURI("~/run", "listChildren", [], 5000);
        conform_st = true;
    } catch(e){
        if(e.toString().indexOf("found") != -1) {
            // try to install
            try {
                execURI("~", "createChild", ["run", "~/sys/tmpstore", "~/sys/anarchic"], 20000);
                execURI("~", "createChild", ["insecure", "~/sys/tmpstore", "~/sys/anarchic"], 20000);
                conform_st = true;
            } catch (e) {
                printDOM("Could not initialize default security-terminal launch environment, falling back to old-fashioned way");
            }
        }
    }
}

pc = 0;
initIPCLock.release(); // = false; // ready for IPC...
var s,c,p1, p2;

if(crun) {
    try {
        c = crun;
        var xd = document.createElement("DIV");
        xd.style.width="100%";
        xd.style.fontSize="100%";
        OutTo.appendChild(xd);    
        pfx = "~/run/";
        pname = c.split("/")[c.split("/").length-1];
        OutTo.prog = pname;
        if(conform_st) {
            execURI("~/run", "createChild", [pname, c, "~/sys/anarchic", xd]);
            start_new_thread(function() {execURI(pfx+pname, "securitySet", [{"ipcIn": {"*":["*"]}}], 50000)});
        }
        else object.createChild(pname, c, "~/sys/anarchic", xd); 
        var pid = start_new_thread(execChild, [pfx+pname, c, []]); // use pid?? use argv??
    } catch (e) {
        printDOM("Failed to execute initial program from "+c+" : "+e); brDOM();
    }
}

while(true) {
    box = document.createElement("DIV");
    set_param_box(box);
    document.body.appendChild(box);
    OutTo = box;
    printDOM("ic# ");
    s = inputDOM();
    s = s.split("<br>")[0]; // wipe out system BREAK
    c = s.split(" ")[0];
    switch(c) {
      case "exit":
        printDOM("quitting...");
        object.destroyInstance(); // or process.destroy()? XXX renaimng proposed
        break;
      case "help":
        // TODO: move this to ic.doc or 'ichelp' program
        printDOM("URI locations:");
        brDOM();
        printDOM("  ~ current terminal; . current object; / hub root; .. parent of current object; default /");
        brDOM();      
        printDOM("built-in commands: for others see /bin");
        brDOM();
        printDOM("  ls <URI> - try to list children of the object at <URI>. Example: ls ~/sys");
        brDOM();
        printDOM("  cat <URI> - try to read() the object at <URI> as if it was a ramstore-like object.");
        brDOM();
        printDOM("  typeto <URI> - write() the text typed next, to specified <URI> ramstore object, create if nesessary. You may also type to another ic# console: like typeto /mycomp/console");
        brDOM();
        printDOM("  delete <URI> - call deleteChild on ramstore");
        brDOM();
        printDOM("  copy <From-URI> <To-URI> - perform a bytecopy of a ramstore");
        brDOM();
        printDOM("  link <What-URI> <As-URI> - link an object URI creating a 'link' child at <As-URI>");
        brDOM();
        printDOM("  terminal_register <name> <password> <email@address> - register a terminal at HUB");
        brDOM();
        printDOM("  terminal_auth <name> <password>  - authenticate a terminal at HUB");
        brDOM();
        printDOM("  terminal_logout - deauthenticate a terminal at HUB");
        brDOM();
        printDOM("  version - print detailed system version information");
        brDOM();

         
        // write() IPC method: used to notify of events; HUB Connected: termname; HUB connection lost
        // readlog - show ErrorConsole log; ping URI - time the exception callback periodically
        // set ... - set various ic# parameters: write allow, app search PATH
        // xedit - highlighting text editor; determine filetype by name/ext or by mimetype, if any returned
        break;
      case "version":
        printDOM("Version ic# 0.0.1 pre-alpha; registered as "+object.getMyAbsoluteURI() + "; Running on kernel version "+object.version);
        brDOM();
        break;
      case "ls":
        if( s.split(" ")[1] ) p1 = s.split(" ")[1];
        else p1 = "~";
        // TODO!!! p1 = s.split(" ")[1] || p1; does not work (evals to bool) for unknown reason!
        try {
            ldata = execURI(p1, "listChildren", [], 10000);
            printDOM("List of objects at '"+p1+"':"); brDOM();
            for(var i=0; i<ldata.length; i++) {
                printDOM(ldata[i]); brDOM();
            }
        } catch (e) {
            printDOM("ls: fetch failed with: "+e); brDOM();
        }
        break;
      case "cat":
        p1 = s.split(" ")[1];
        if(!p1) {
            printDOM("cat: not enough arguments"); brDOM();
            break;
        }
        try {
            data = execURI(p1, "read", [], 10000);
            preDOM(data);
        } catch (e) {
            printDOM("cat: fetch failed with: "+e); brDOM();
        }     
        break;   
      case "rm":
      case "delete":
        p1 = s.split(" ")[1];
        if(!p1) {
            printDOM("delete: not enough arguments"); brDOM();
            break;
        }
        try {
                lURI=p1.split("/");
                oname = lURI[(lURI.length-1)];
                lURI.pop();
                oparent = lURI.join("/");
                //printDOM("Creating "+oname+" at "+oparent); brDOM();
                execURI(oparent, "deleteChild", [oname], 10000);
                //printDOM("object deleted"); brDOM();
        } catch (e) {
            printDOM("delete: failed with: "+e); brDOM();
        }     
        break;   

      case "typeto":
        p1 = s.split(" ")[1];
        if(!p1) {
            printDOM("typeto: not enough arguments"); brDOM();
            break;
        }

        printDOM("Input text; type CTRL-Enter to stop:"); brDOM();
        p2 = editDOM(">");
        brDOM();
 
        try {
            execURI(p1, "write", [p2], 20000);
        } catch (e) {
            if(e.toString().indexOf("not found") == -1) {
                printDOM("typeto: write() failed with: "+e); brDOM();
                break;
            }
            try {
                // get name and get parent
                lURI=p1.split("/");
                oname = lURI[(lURI.length-1)];
                lURI.pop();
                oparent = lURI.join("/");
                //printDOM("Creating "+oname+" at "+oparent); brDOM();
                execURI(oparent, "createChild", [oname, "~/sys/ramstore", "~/sys/anarchic"], 20000);
                execURI(p1, "write", [p2], 20000);
            } catch (e) {
                printDOM("typeto: failed with: "+e); brDOM();
            }
        }     

        
        break;
      case "copy":
        p1 = s.split(" ")[1];
        p2 = s.split(" ")[2];
        if(!p1 || !p2) {
            printDOM("copy: not enough parameters"); brDOM();
            break;
        }

        try {
            data = execURI(p1, "read", [], 10000);
        } catch (e) {
            printDOM("copy: object read failed with: "+e); brDOM();
            break;
        }
        
        try {
            execURI(p2, "write", [data], 20000); // TODO: inefficient: will send full request then fail and resend...
        } catch (e) {
            printDOM("copy: trying to create new ramstore"); brDOM();
            try {
                lURI=p2.split("/");
                oname = lURI[(lURI.length-1)];
                lURI.pop();
                oparent = lURI.join("/");
                execURI(oparent, "createChild", [oname, "~/sys/ramstore", "~/sys/anarchic"], 10000);
                execURI(p2, "write", [data], 10000);
            } catch (e) {
                printDOM("typeto: failed with: "+e); brDOM();
            }
        }     

        
        break;
      case "link":
        p1 = s.split(" ")[1];
        p2 = s.split(" ")[2];
        if(!p1 || !p2) {
            printDOM("link: not enough parameters"); brDOM();
            break;
        }
        
        lURI=p2.split("/");
        oname = lURI[(lURI.length-1)];
        lURI.pop();
        oparent = lURI.join("/");
        
        try {
            execURI(oparent, "addAsChild", [ oname, p1], 10000);
        } catch (e) {
            printDOM("link: object link failed with: "+e); brDOM();
            break;
        }
        
        break;

      case "terminal_register":
        p1 = s.split(" ")[1];
        p2 = s.split(" ")[2];
        var p3 = s.split(" ")[3]; // TODO: need multi-word support. like braces or smth?
        if(!p3) p3 = "";
        if(!p1 || !p2 || !p3) {
            printDOM("register: not enough parameters"); brDOM();
            break;
        }
        
        
        try {
            execURI("/", "register", [ p1, p2, p3 ], 20000);
        } catch (e) {
            printDOM("register: failed with: "+e); brDOM();
            break; // does not break out...
        }
        printDOM("register OK"); brDOM();
        break;


      case "terminal_auth":
        p1 = s.split(" ")[1];
        p2 = s.split(" ")[2];
        if(!p1 || !p2 ) {
            printDOM("auth: not enough parameters"); brDOM();
            break;
        }
        
        
        try {
            execURI("~", "auth", [ p1, p2 ], 20000);
        } catch (e) {
            printDOM("auth: failed with: "+e); brDOM();
            break; // does not break out...
        }
        printDOM("auth OK"); brDOM();
        break;

      case "terminal_logout":
        try {
            execURI("~", "logout", [ ], 20000);
        } catch (e) {
            printDOM("logout: failed with: "+e); brDOM();
            break; // does not break out...
        }
        printDOM("logout OK"); brDOM();
      
      
      case "":
        break;
      
      default:
        // TODO: search for commands at PATH?
        argv = s.split(" ");
        //p1.shift(); // pass a full array to main

        try {
            
            if(conform_st) {
                pname_orig = c.split("/")[c.split("/").length-1];
                pname = pname_orig;
                pfx = "~/run/";
                var padd = 1;
                var allprogs = execURI("~/run", "listChildren", []);
                for(var j=0;j<allprogs.length;j++) {
                    if(allprogs[j] == pname) {
                        pname = pname_orig+padd;
                        padd++;
                        j=0;
                    }
                }
            } else {
                pc++;
                pname = p+pc;
                pfx = "./";
            }
            var xd = document.createElement("DIV");
            xd.style.width="100%";
            xd.style.fontSize="100%";
            OutTo.appendChild(xd);    
            OutTo.prog = pname;
            
            if(c.charAt(0) == "/" || c.charAt(0) == "~") {
                if(conform_st) execURI("~/run", "createChild", [pname, c, "~/sys/anarchic", xd]);
                else object.createChild(pname, c, "~/sys/anarchic", xd); 
            }
            else {
                var try_paths = ["~/bin/", "/bin/", "/jeneric.net/bin/"];
                for(var k=0; k<try_paths.length; k++) {
                    lc = try_paths[k]+c;
                    try {
                        if(conform_st) execURI("~/run", "createChild", [pname, lc, "~/sys/anarchic", xd]);
                        else object.createChild(pname, lc, "~/sys/anarchic", xd); 
                        c = lc;
                        ok = true;
                        break;
                    } catch (e) {
                        // do nothing
                    }
                }
                if(k == try_paths.length) throw "not found by URI";
                  
            }    
            // now set security to allow-everything-in
            if(conform_st) {
                start_new_thread(function() {execURI(pfx+pname, "securitySet", [{"ipcIn": {"securitySet": [], "securityGet": [], "*": ["*"]}}], 50000)}); // never allow to fail...
            }
            
            var pid = start_new_thread(execChild, [pfx+pname, c, argv]); // use pid??

        } catch (e) {
            if(e && e.toString().indexOf("found") > -1) { // + defeat undefiend exception bug
                printDOM("ic#: command not found by path: "+c); brDOM();
                break;               
            } else {
                printDOM("ic#: another error: "+e); brDOM();
                break; 
            }
            
        }

        
    }
}
