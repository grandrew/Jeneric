http://go.jeneric.net:9000/#terminal_id=home,terminal_key=qw34rt
http://go.jeneric.net:9000/#terminal_id=grandtest,terminal_key=aaaaaa

GLOBAL JEOS3 ROADMAP

- написание базовых утилит для jeos3 (типа unix cat, ls, edit, etc.)
    - продумать что нужно для того чтобы _начать девелопить_ прямо "там":
        - ic: execute CLL
        - jh: run child programs with parameters fed to them via IPC to console_main(paramlist); via the DOM <pre> node bound
            multicall methods:
            + typeto URI: create/replace URI of filestore/ramstore type object with the text typed; similar to 'cat' utility
        - implement object types:
            + ramstore (get)
            + terminal
        - implement security models:
            - anarchy
            - owner write/all read (public)
            - UNIX security?
            - list write / all read / owner securityProperties change
        
- проработка DOM Wrapper'а
- интеграция jeos3 в движок СвояСеть (вкл. изобретение какого-нибудь
    интерфейса для установки и выполнения  программ)
    - продумывание необходимости дополнительных библиотек для удобства
      девелопмента
- локализация СвояСеть для США
- написание industrial-grade DB для корня СС
- реализация SUBJIT для интерпретатора ядра
- написание "компилирующего код" модуля
- полная сериализация VM, включая стек и DOM
- ?манипуляция DOM через WIPC?

------------------------------------------
- отладка всего этого
    - включая написание testsuite'ов и др.
    
FULL gears/blob support, including 
    + chunk sending/receiving, 
    + serving locally
    T blob property transfer
    - dnd-serving, 
    - fileselection-serving
    - wrapped blobs for property usage
  
однако, очень интересным представляется следующее: написать плагин для браузера (скажем, назовем его некий 
Java plugin) который сможет кушать Gears Blobs либо нативно либо через ФС на которой сохранен Blob, 
и производить над данными некоторые манипуляции, например, перекодирование видео. Допустим, код этого Java, 
назовем его "апплет", будет гнаться через jeneric WIPC, и, при желании, сохраняться локально под лицом 
некоторого супервизящего объекта, который может включать в себя как JS код, так и любое кол-во "прикрепленных" 
блобов, и сможет методами модификации отведенной ему части DOM-дерева, "запускать" тот самый Java-код, и кормить 
его данными самостоятельно. Будет счастье :)



GENERAL JENERIC TODOLIST
--------------------------------------------------------------------------

TESTING - SERIALIZE

+ google gears hint for ic.jn
- cookie store(creds?) at eosinit.js?
  - where to store creds?
  - maybe store session to survive page reloads?

TESTING - HUB
+ data pipes

TESTING - DOM
+ DOM
- CSS

TESTING - ALPHA

+ bugfixes below
+ faster parser
- cross browser code
- test suite (automated)
- write simplest but working security model
- write security model for terminal (including TODOs for security in there
- write security model for ss storage
- create some usable tools: a better ic# (completion? commands history?), better EDIT (+highlighting??)
+ run /lib
- run /home [virtual?? non-browser] - the industrial DB

TESTING - BETA

- write 'approved' module for security and apps

Basic svoyaset integration!
  - external [svoyaset/mysql] data source access via attached SS virtual storage
  - webpage integration
  - GUI integration
How to start using? What attractive apps? Tmp folder, etc.?
How to start developing?
How to start communicating?





HUB TODO
--------------
+ Data pipe protocol
  + including BLOB arguments transparent/mixed transfer (m.b. kernel parameters to control usage of Gears to deliver all messages?)
    instead of native AJAX
- HUB relay - the simplest integration (the PHP)
- HUB relay with service plugins?? (PHP)
- HUB relay - haproxy (config)
+ Domain(hub) registration?
- Request signing ihcp?
- IHCP
- The full hub - java?
- The dedicated server - v8?


DATA PIPE proposal
+ an rq like GET jeneric.net/termname/var/test?session=XXXXX will create a set of requests to read() the data from location and set the session variable to request object for security model validation.
+ the same with POST/multipart with 'data' POST field set to file contents (how does it work exactly?)
+ for the POST and GET transfers of BLOBs we will need pipe support at the terminal.
+ fixed storage suport is also required


ASSORTED TODO ITEMS
----------------------------------------------------------------------------

+ security: signRequest at work
+ getMyAbsoluteURI method
+ fix encoding (do utf-8 everywhere)
+? terminal connection init SLOW ?? suddenly self-fixed?
+ BUG in try/catch (see below)
+ import keyword (+userspace script injection)
+ semaphores (+think/document select()-like call using dynamic semaphores)
+ IPCLocks - to semaphores!
+ faster createChild
    WHY is object creation so slow?? - probably because of lacking lock/semaphore mechanism?? or what??
        trace/profile that! 
        -> + because of the creation algorithm... see 4 full IPC calls + massive user-level code involved
        -> - parsing is slow! -> compile to binary!
+ hubAuthenticationChanged (and kconfig altering)
+ maybe add object_security? TypeURI and SecurityURI to request object!?
+ rename to terminal_auth and terminal_register ??
+ ic: introduce more timeouts
+ typeto should be a better parse of exceptions
+ supply kernel parameters as #-string in location: http://go.jeneric.net/#init=/path/to/init,terminal_id=myterminal,terminal_key=TeRmPaSs
+ safe wrapper for Gears
+ THE MOST general terminal init object: read some autostart values locally/remotely(?)
+ BLOB file access/local webstorage access
+ implement atob/btoa using Orbited's converter wrapper
+ wrapped string operations for base64 using formulas (see g:stackoverflow base64 size) -- done with HEX encoding
+ pinging HUB does not seem to prevent from session drop :-\ (BUG in pinger)

- need a method to attach to child errors/system notifications: like if the child of ic dies before exec (also the IPC dedlocks!)


- new kernel feature: check for getChild() ipc(?)object. method to get child ref redirect instead of kernel URI resolution procedure - alternative getChild for more object path resolution control
- check if the values of function parameters not supplied are defined but set to 'undefined' so that || or && notation could be used safely
- improvement: if there are several Blobs in request - transfer chunked data instead of just bare body in many requests; pack the blobs into FormFileTransfer-alike HTTP pieces; parse them chunked in Twisted and send to callee/caller this way
- properly debug/audit conections
- we need A THOROUGH security discussion!

- set static file cache ageing header in HAProxy to seconds - for debug - to 1 day - for retail
- create in-jeneric unit testing framework and move everything into it (see python unittest module)
- go the twisted.web2 way to handle file uploads :-\
- escape/unescape "Blob("+")" in the STRING data being sent (in the parser/reviver and in hub)
- write a standard shared library: a shared library is in fact a cloud-based shared method storage. The library may load some code on-demand and will contain wrappers for cloud-based methods
- gears fully autonomous operation vs. portable hub?
- gears 'don't allow': to continue without gears instead of halting (?!?)
- having comet sessions at arm, using pinger to identify sessions is inadequate!
- and sessions seem to not properly expire
- decouple session from the online presense fact!???
- kernel improvement: profiler
- idea: in ErrorConsole.log print time and issuing vm uri, at least for firebug console output
- jsdom: mousewheel support! see http://markup-javascript.com/2009/05/24/krossbrauzernyj-mousewheel-obrabotka-sobytiya-skrolinga/

- i18n support

URGENT:
+ detach security reference from vm.global (and attach to vm.security, having all(almost?) sec defined in a 'security' object)
    + thisObject set to 'security' object
    + how to safely call setSecurityState and getSecurityState ?
        + call them from execIPC directly
        + set thisObject
+ check that ["___prop"] indexing is protected (triple underscore indexes are not supported TypeError)
+ need fast native JSON global object to stringify/back for object setState
  + set up native_stringify in json2.js
  + and mozilla bug workaround!! use native_sringify
+ deal with native object prototyping: properly wrap the 'global' natives!
  + also note the __hasInstance__ and others defined at Fp (rename to triple ___)
+ jsexec: Move the methods from highly closured state to unclosured.
+ remove default jn instance (code cleanup)
+ faster parser
+ get rid of defineProperty
+ T need testing perform Object.prototype context switching
+ T need testing get rid of TRUE in RETURN pushes -> everywhere
+ rename all exceptions that use JNARIC: to JENERIC: ; also remove 'JENERIC: ' from exception string to be in 
    conformance (better define a .jeneric property to detect non-fatal kernel exceptions)
+ dead objects are not removed (see IC issue -> run ~/var/UNIT/fetchurl_e.jn)
? connection init slow
+ ping important improvement: only if last send was more than PINGINTERVAL/2 ago
+ gears adapter for file pickup
? T clean_timeout bug: tries to clean nonexistent session and KeyError's 
? T invalid readyState 
+ T reauth for terminal when connection drops (acquire temporary key or do a real reauth when hubConnectionChanged or a kernel method to store AUTH info temporarily)
+ T move auth to terminal.jn responsibility
+ //x.innerHTML = "&nbsp;"; -> DOMerror 12 -> Syntax error ?!?!
+ re-check all unclosured methods for 'this' mess!
+ cross browser code
+ clean +terminal.jn, ic.jn, etc. for ultra-fast init, 
- prettify IC: 
    + good input
    ? auto-focus
    + history (at least for session, save upon hard-coded info)
    + completion/hinting via TAB (join completion candidates into a string, then regex inside it for variants)
    + better typeto: doesnt work with WebKit
    + typeto: doesnt fire events in IE8 & Opera-linux (cannto Ctrl-Enter to sav?)
    + clear&delete, minimize framewindow
    - set max-height property of the div(and scroller) and overflow-y: auto; overflow-x: hidden
    - cd/pwd    
    - opera behaves BAD with contentEditable (typeto) :-\
    - PATH (feed IC with PATH, PATH set up command)
    - appropriately parse "\ " space escaping
+ IE8 exceptions problem!
+ IE8 preventDefault (returnValue) on past event (try/catch?)
+ addEventListener: create a method where scheduler tries to execute as much of the eventListener code as possible
    without preempting the flow(and immediately preempting current flow not scheduing the task)... 
    this will make event.preventDefault() usable
+ terminal session unstable! (FF3.5 frequently acquires new session :-\  maybe pinger sometimes fails? try/catch block it!)
+ working with links is broken (failed to execute getchild?)
+ addEventListener thread flood problem! (queue events? skip events after queue exhaust?)
? implement floating window for DATA PIPE and 100k instead of 20k (or + somehow detect conn spd first)
+ link() call for an already-linked object fails with timeout
+ do eosinit, etc. via callable init() routine for integration
+ CSS support & testing
+ disallow setting of SRC on an iframe & object. archive,codebase,data,usemap
? need faster hub connection init! (not very essential, hub connection is actually OK)
- highlighting editor (codemirror?)
    - need better iframe support, at least these:
        + iframe => div (??? make RETURN IFRAME! (only create link as <div>, <span>, etc. NOT in createElement!! TODO!!
        + frame.contentWindow
        + frame.contentWindow.document
        + ..document.body, ownerDocument contentDocument contentWindow wrap/trap!
        + document.designMode = "on" / "off" -> behave as contentEditable
        + document.write(HTML) -> feed the di sax parser further
        + SPAN with style display:none (hard-coded)
        + parse <body> to <div>
        + parse <html> <meta> <title>  and such into <span> with display: none and set js intrf 'origTagName' to original tagName 
        + parse <link> + CSS tags, (and add display: none to SPANs)
        - parse <script> with SRC, the same
            - what stack to import scripts to??
                - create a new stack associated with iframe "main thread"
        + for the script inside IFRAME: ownerDocument->document to have window.top and parent
        + element.spellcheck = true/false
        - catch 'on' events (like onload)
            - see https://developer.mozilla.org/en/iframe: Some quirks of the iframe in design mode: Elements 'onclick' functions doesn't work - add events with addEventListener window.setTimeout doesn't work. Use parent. 
- iframe core refactoring: support for iframe code scope trap
    - enumerate scope-formation places: 'global' scope setup, etc.
        - setTimeout (thisObject)
        - start_new_thread
        - setInterval
        ---- the above may not require scope change (see spec.)
            - FUNCTIONOBJECT_PROTOTYPE._call (thisObject)
            - new Function: (in global init)
            - ExecutionContext.prototype.scope this.XCp.scope = {object: this.global, parent: null};; thisObject next line
            - reflectClass uses global [check]
            - putValue uses global as default scope search path
            - toObject uses global to convert [check]
            - step_next in error checking uses global to check for InternalError
            - all internalError set by global.InternalError
            - error deref algorith uses global [skip]
            - execf_thread sets thisObject (incorrectly? compare with setTimeout?)
            - execf_stack
            - native __hasInstance uses vm.global.Function check
        + fixed using global switch
    + add ability to create new global scope via method
        - maybe "fork scope?" - mean, link to global InternalError and other defaults?
            then all the code will work with global scope forks...
    - add ability to alter global scope [????]
    + rewrite iframe scope creation procedure (to run all code from new scope)
    - rewrite onload event
    - test!
- multi-line string
- remove fetchUrl & load () when bind_om init (security)
- ic: better parse of errors when program launch (maybe attach to errorLog??)
- ic: bug with autocompletion (double-check the regex to 1. match only from beginning and 2. return ful string)
- ic: removing dead program doesn't work via click on "close"
- ic: remove these: 'child not found in cl' and 'IC: failed to remove child'
- ack! is sent 35 times (!!) during codeMirror loading
- hub leaks memory when client actively reannounces :-\ - should stop the bad-behaving client from flooding the base
- check that event handler stck queue really works!
- why is 'import' unshifting stack instead of pushing?? that doesnt seem to be correct
- rename 'import' to 'include' (import is reseved javascript keyword and include is more natural from other languages)
- DOM transactional model: .commit() -> to write to DOM (to solve consistency problems of editors)
- jn-thrown exceptions line and file are not set in chrome browser
- register global shortcut like CTRL-SHIFT-P to print trace if debug enabled!
- codemirror sometimes fails to load entirely (slow connection/orbited issue?)
- editor.js is impossiblt to save via /bin/edit: the system hangs completely FF3.6/eeepc
- Range: insertNode: DOM normalizer (and other methods that require normalized DOM)
- implement advanced HTML control element: highlighting code editor (as TMP workaround?, double iframes!, expose codeMirror API)
- close registration of terminal names shorter than 8 chars
    - create terminal names of length 8+, (or?) starting with # instead of 't'
    - filter(sort down only!) out names starting with # from 'list' output??
- some strange info at the end of stack traces found :-\
- think of 'mixed namespace': merge object trees under same destination (multiple links? -> search for children, methods in descending order)
- deal with JSDOM setAttribute/js DOM intrf mess (props set/get by .type != .setAttribute('type', v) )
  normalize:
	- setNamedItem
	- DOMElement_setAttributeNode
	- bind_real_dom
	- setAttribute
	- ___setters&getters
  do for:
    - a & tagret
    - form & tagret => default not to _blank but to _frame; disallow non-jeneric destinations?? maybe always upload to hub and then decide what to do?
    - link & disallow non-css
    - object - disallow everything except for flash, set params to not call external JS
    - object, form src!
- enhance/reduce logging for jsobject/eosinit: log only if KCONFIG("debug") is set; and set the level
    - or maybe introduce firebug/console-only setup??? like set DEBUG=<LEVEL> in firebug to enable logging?
    - check jsexec for (full) conformance with DEBUG variable
    - methods to setup debug for within inside VM (but! checks for global DEBUG before logging) -- 'attach to console' here
- cookie session auth
- i've created a temporary session folder for you at /home/(termname)/
    - make sessions persistent through page reloads (?)
- how to change security model of an object?? - only a super-puper user may do that; or the security code itself
    - terminal has initial security. It must to allow or to disallow the setting of security by object parent (at inittime or runtime)
    - denote every single kernel feature and allow security code to manage it (we need a wiki page on that)
- detach all I/O methods from VM!
- sequential READ for object type_uri (and sec_uri??) -- see codeMirror problem (HUGE file transfer)
    - or make HUGE argument transfer more reliable (auto-sequencing??)
- ISPs as partners: VPS hosting for HUBs
- security model
- encrypt passwords
- security to return optional "reason" value: true or text that will be set to "deny reason" for EPERM, etc.
    - modify EPERM error transfer
- stabilize init procedure (to look for init in /var or something?)
- localStorage serialization (available on many browsers)
- object description protocol (at least for storage objects + naming) type, length, content-type
    - link should always report type 'link' (kernel feature?)
- objects manipulating toolkit
- cute "OK" check for POSTs (to indicate the POST was OK)
- html templating support via core extension (require STL to get this to work; it will be later replaced by userspace library since userspace will be _as fast as kernel_)
- html FORM, OBJECT & applet/flash security (write flash mp3 player?)
    - test CSS writing a cute mp3 player
    - test OBJECT/IFRAME security in IE & others!
- stress-test the jeneric object database (serializer, swapout, etc. - memory consumption, object limits.. (KCONFIG?))
- jsexec optimization: do not switch context for EACH step, rather do this for each BURST group
- better console library (iclib)
- database access methods
    (or kernel driver object?? - terminal security model that allows for native code "RING0" injection)
- start integration proposal
- write standard tools: mv(?), rm, mkdir, rmdir, cp, cr - create object of certain type/sec, ul - upload something, cl - copy local (gears get)
    - friend group search
- industrial database
    - stress-test what if we use FF/Chrome storage
    - PUBLIC security model for INDUSTRIAL #1
    - think through how to build a standalone storage (maybe using full JN protocol + security model?)
    - use either solution
- a descriptive Google Gears ask-for-install field
- test jquery & something
- write SvoyaSet panel?? or make SS entirely AJAX (see some Elgg tutorial to AJAXify it)
- International version yrmarkt.com, yourmarkt.com, corpoware.com, webnotware.com, warenot.com, warebs.com, 
- remove unneeded commands from IC
- terminal ipc method ping
    - and 'ping' program

- process control routines
- print_traceback() kernel method
- store an ummutable? ID object at ~/sys/uuid that holds the machine UUID stored in unexpirable cookie see http://www.broofa.com/Tools/Math.uuid.js
- fix array.sort and JSON.stringify(replacer/reviver) (maybe others??) - WONTFIX for pre-alpha release
- make sure 'move' call really exists for the object tree (
  - and document all tree calls)
  - more zope-like and objectDB-like interface (full object DB): get child, set child via child links 
    they won't get GC'ed until freed. May even deleteChild() return object reference that may be used for addAsChild!?!
- gears dnd adapter for file drop [difficult issue]
- 'trusted' application checking via ic# and general interface
  - or executioner?? JS alert window!? - exec checking LATER!
- profile firefox memory leakage; general memory usage
- estimate object memory/fixed storage usage
    - feed this information to security model
    - also set the limits in VM via parent call
    - also get the limits in child
    - control the ability of child creation totally
- HUB: sessions do not timeout
- push TRUE: HAS NOT gone aWAY!! [at least for exception cases] [seems to be an exceptions problem only]
- jeneric in 'prefix mode' - for easier integration: prefix="/hub.php" -> all requests go through "mysite.com/hub.php?q=/tcp/...", "mysite.com/hub.php?q=/os/ramstore.jn", etc. 
  - pass jeneric kernel parameters in integration-friendly mode


- get rid of STOMP ACKing -- HTTP protocol is already a good transport [need some tight HTTP/STOMP integration]
- get rid of pinging - use HTTP long-poll session info [STOMP session connection information?]
- invent kernel blocking I/O ABI like: var sk = stack_ackquire(); var st=stack_stop_ackquire(); sk.setResult(value); stack_stop_release(st); 
- ABI methods namimg conventions?? like use set_result or setResult?
- automated test suite + test cases
- introduce debug flag for hub instead of just constantly dumping everything
- ??? absolute path resolution improvement: watch for LIPC requests defined as WIPC; do not send through HUB
- make sure it is secure to have SOME native methods non-wrapped (may alter them somehow? like setting _proto_ etc.)
- clean kernel code
- rename kernel version from jnaric to ratbird + basic automated build-based numbering (??)
- steal unit tests for DOM
- set and debug for DOCTYPE strict setting (mozilla will render faster) see https://developer.mozilla.org/en/Migrate_apps_from_Internet_Explorer_to_Mozilla
- jsdom: better DOM cache cleanup upon removal :-\
- even more fast parser: see errors
- DOM wrapper seems to need a substantial rewrite ???
    (without having the 'local copy'?)
- // WARNING!! this all may result in exceptions! (DOMException) -> this should not be thrown by VM as errors!
- mouse scroll event DOM enhancement http://markup-javascript.com/2009/05/24/krossbrauzernyj-mousewheel-obrabotka-sobytiya-skrolinga/
- need to re-announce (or ping) if connection lost 101 ???
- BlobObject slice poor perf bugfix for Chrome (do not slice if we want full object)
- totally-rename wrappedString to ___wrppedString for more security
- file GEARS bug: when doing slice of size more than blob size -> the LENGTH is set to parameter sent to slice rather than real (0)

--- LTR line
----------------
- highlighting mc-like (keyboard-driven) code browser
- some terminal security improvements
    - move terminal_auth to terminal.jn responsibility (only allow to auth from "~" object)
    - implement passwd change in ic.jn (write program?)
    - safe logout (notify the hub of sign-off)
      the hub should also drop session if there are many failed send attempts ?? or not?? no! 
- general notification API?? invent general (kernel??) notification/subscription protocol!
    - ramstore object notifications hooks (what notifications???? investigate this? like object ready, object modified, child added, etc?)
      general storage notification protocol and general general event protocol
    - connection notification, etc.
- introduce connection API (in case we will want to disconnect manually?)
- LTR a more unix-like shell: cwd, etc..
- LTR more semaphore types?
- DOM ceanup upon object removal NOT NEEDED (+ DOM detach request for iclib)
- LTR support for remote hibernation BEFORE launch! (why?)
- SUBJIT
- TOTAL SERIAL
- portable continuations
- compiled code? like search for "type_src".o first
- compiled code cache? like copy - not parse every time
- object code parse cache: at least for wakeObject; for createObject too!
- cache parsed code for all security models loaded (hmm.. not all.. some, with stack or smth
- better connection speed on-line benchmarking for data pipe floating window
- make the code so clean, well-designed and readable, that it would be a perfect adn best JS/DOM documentation out there!

kernel programming advisory: be careful with methods that stop the stack - report any possible error via try/catch and stack release w/throw

From pwp2:
    *  Port this to jeneric
    * read tinyMCE source code to understand getSelection
Jeneric is a mix of virtualization for the WEB, the Web Operating System, etc...


--- PROPOSAL WORK
---------------
- rethink MOVE & LINK object system properties
- propose more terminal independence: do not ACK at HUB but ACK at terminals only; will require a thorough HUB/terminal data protocol review
  IMPORTANT!
- Need additional interface for the ramstore like object LIST method: creation date, file type, FILE LENGTH!!! etc ipc_type, ipc_contenttype.
- Some additional standard object description methods should also be defined in Jnaric Standard Protocol Proposal (JSPP?)
- A proposal for security description inside the object to allow for security models interoperability and succesful object serialization
- A proposal for security setup and/or MVC model for the security setting.
- The web browser may fail. We should consider different scenarios of what may or should happen.
- Web services/site integration (hidden frame?) (kernel parameters for LOCATION change and restart?)
- for BETA: Write standards for users and friending, autostart (system init like sysV?), security, storage object interface(entire)
- investigate JSON-RPC compatibility [stabilize error codes]
- technique to pass methods directly (kbind has failed!!) (watch out for references that will prevent from garbage-collecting!)
    this is all to allow for faster IPC...


--- BUGS
-----------------------
- IE seems to set incorrect Error either in event handler
- Chrome does not set line numbers and file names on exceptions (undefined) (??)

--- DOCUMENTATION WORK
---------------
- DOCument startup procedure
- further document security; explain examples
- collect all exceptions/error reports and create exception matrix
- LIPC sending function references and executing them in another vm may result in any unpredicted behaviour (stack mess)
- EOS or POS?
- hub.py is VERY poorly code-designed


--- CRAZY
---------------
- DDP kernel extension: Direct DOM Pixelerizer
    - create a <table> of certain dim & size (or calculate via pixelsize)
        - & cloneBuffer
    - expose STD GFX hooks: pixel, draw move
        - later: more advanced fast-drawing functions: fill(), box(), circle(), arc(), etc.
    - expose 8-bit Unicode binary image drawing support (convert BMP images using GearsBlob, for ex.)
    - z-index double(or N-ble)-buffering support (.setActiveBuffer(N))



---------------
Study google closurer after all.. Maybe they have a good compiler ;-)
---------------


JIT: ASM-like (JAM inline snippets - no loops, no calls allowed. Give keywords to yield/loop)
JIT: Ask-To-Call, Ask-To-Iterate (ACAI technique), safe-compile??? (rename globals accessed???)
---------------
things to make work:
http://marijn.haverbeke.nl/codemirror/ http://codepress.sourceforge.net/changelog.php
http://www.openjs.com/scripts/events/keyboard_shortcuts/
http://qooxdoo.org/about
http://www.cdolivet.com/index.php?page=editArea&sess=09ec47cc055fa9d63a6aa765173a1d70
jquery!!


QESTIONS:

- basic security model for ic# and others
- messaging protocols
- listing protocols
- friending protocols
    - friending policies
- sharing protocols
    - passive sync?

- traffic prioritizing/shaping


BUGS:

----------------------------------------

make ALL stack STOPs use the STOP ID!!

