http://go.jeneric.net:9000/#terminal_id=home,terminal_key=qw34rt
http://go.jeneric.net:9000/#terminal_id=grandtest,terminal_key=aaaaaa

GLOBAL JEOS3 ROADMAP

- написание базовых утилит для jeos3 (типа unix cat, ls, edit, etc.)
    - продумать что нужно для того чтобы _начать девелопить_ прямо "там":
        - ic: execute CLL
        - jh: run child programs with parameters fed to them via IPC to console_main(paramlist); via the DOM <pre> node bound
            multicall methods:
            - typeto URI: create/replace URI of filestore/ramstore type object with the text typed; similar to 'cat' utility
        - implement object types:
            - ramstore (get)
            - terminal
        - implement security models:
            - anarchy
            - owner write/all read
            - list write / all read / owner securityProperties change
        
    - совместно с проработкой DOM Wrapper'а
- интеграция jeos3 в движок СвояСеть (вкл. изобретение какого-нибудь
    интерфейса для установки и выполнения  программ)
    - продумывание необходимости дополнительных библиотек для удобства
      девелопмента
- локализация СвояСеть для США
- написание industrial-grade DB для корня СС
- реализация SUBJIT для интерпретатора ядра

- отладка всего этого
    - включая написание testsuite'ов и др.
    

... через Gears _возможно_ хранить, и как угодно работать с любыми объектами и файлами, в т.ч. открывать их локально в браузере (напр., для просмотра фильма или фотки либо "скачивания" - т.е. перенесения для обработки на реальную ФС), пересылать "любыми кусками" по HTTP, принимать по HTTP. Однако, это потребует реализации довольно хитроумной схемы работы подсистем jeneric при использовании Gears
FULL gears/blob support, including chunk sending/receiving, serving locally, dnd-serving, fileselection-serving, etc
  - using internal API wrapper that will expose an easy and straightforward API:
  - object.blob.getAsUrl(blobRef) - return url by which the object may be accessed from the browser user-side 
    (like open in target-blank, or load as an SWF player, etc.)
  - chunk read/write that will pass these chunks in a different manner than incapsulating them into JSON requests
    for example, the prior sub-connection establishment for arbitrary data receipt for a HUB
однако, очень интересным представляется следующее: написать плагин для браузера (скажем, назовем его некий Java plugin) который сможет кушать Gears Blobs либо нативно либо через ФС на которой сохранен Blob, и производить над данными некоторые манипуляции, например, перекодирование видео. Допустим, код этого Java, назовем его "апплет", будет гнаться через jeneric WIPC, и, при желании, сохраняться локально под лицом некоторого супервизящего объекта, который может включать в себя как JS код, так и любое кол-во "прикрепленных" блобов, и сможет методами модификации отведенной ему части DOM-дерева, "запускать" тот самый Java-код, и кормить его данными самостоятельно. Будет счастье :)
  - maybe think of Sun microsystems cooperation to support this shit??

TODO
- test suite (to run from ic)




GENERAL JENERIC TODOLIST
--------------------------------------------------------------------------

TESTING - SERIALIZE

- google gears hint for ic.jn
- cookie store(creds?) at eosinit.js?
  - where to store creds?

TESTING - HUB
+ data pipes

TESTING - DOM
- DOM
- CSS

TESTING - ALPHA

- cross browser code
- write simplest but working security model
- write security model for terminal (including TODOs for security in there
- write security model for ss storage
- create some usable tools: a better ic# (completion? commands history?), better EDIT (+highlighting??)
+ run /lib
- run /home [virtual?? non-browser]

TESTING - BETA

- write 'approved' module for security and apps

Basic svoyaset integration!
  - external [svoyaset/mysql] data source access via attached SS virtual storage
  - webpage integration
  - GUI integration
How to start using? What attractive apps? Tmp folder, etc.?
How to start developing?
How to start communicating?





HUB TODO
--------------
- Data pipe protocol
  - including BLOB arguments transparent/mixed transfer (m.b. kernel parameters to control usage of Gears to deliver all messages?)
    instead of native AJAX
- HUB relay - the simplest integration (the PHP)
- HUB relay with service plugins?? (PHP)
+ Domain(hub) registration?
- Request signing ihcp?
- IHCP
- The full hub - java?
- The dedicated server - v8?


DATA PIPE proposal
- integrated into web security model: session auth
- an rq like GET jeneric.net/termname/var/test?session=XXXXX will create a set of requests to read() the data from location and set the session variable to request object for security model validation.
- the same with POST/multipart with 'data' POST field set to file contents (how does it work exactly?)
- for the POST and GET transfers of BLOBs we will need pipe support at the terminal.
- arbitrary data transfer: pipe support at terminal!!
- fixed storage suport is also required
Now, the pipe will go through Gears AJAX:
 Or via modified Orbited routine?



ASSORTED TODO ITEMS
----------------------------------------------------------------------------

+ security: signRequest at work
- getAbsoluteURI method
- fix encoding (do utf-8 everywhere)
- LTR a more unix-like shell: cwd, etc..
- terminal connection init SLOW
   - introduce connection API (in case we will want to disconnect manually?)
+ BUG in try/catch (see below)
+ import keyword (+userspace script injection)
+ semaphores (+think/document select()-like call using dynamic semaphores)
  - LTR more semaphore types?
+ IPCLocks - to semaphores!
+ faster createChild
    WHY is object creation so slow?? - probably because of lacking lock/semaphore mechanism?? or what??
        trace/profile that! 
        -> + because of the creation algorithm... see 4 full IPC calls + massive user-level code involved
        -> - parsing is slow! -> compile to binary!
- hubAuthenticationChanged (and kconfig altering)
- general notification API?? invent general (kernel??) notification/subscription protocol!
+ maybe add object_security? TypeURI and SecurityURI to request object!?
- implement passwd change in ic.jn (write program?)
  - rename to terminal_auth and terminal_register ??
  - move terminal_auth to terminal.jn responsibility
- safe logout (notify the hub of sign-off)
  the hub should also drop session if there are many failed send attempts ?? or not?? no! 
- ic: introduce more timeouts
  typeto should be a better parse of exceptions
+ supply kernel parameters as #-string in location: 
  http://go.jeneric.net/#init=/path/to/init,terminal_id=myterminal,terminal_key=TeRmPaSs
- ramstore object notifications hooks (what notifications???? investigate this? like object ready, object modified, child added, etc?)
  general storage notification protocol and general general event protocol
- remove default jn instance (code cleanup)
- get rid of defineProperty
- jsexec: Move the methods from highly closured state to unclosured.
- investigate JSON-RPC compatibility
+ safe wrapper for Gears
+ THE MOST general terminal init object: read some autostart values locally/remotely(?)
  - DOCument this
- DOM ceanup upon object removal (+ DOM detach request for iclib)
- LTR support for remote hibernation BEFORE launch! (why?)
  - need fast native JSON to stringify/back for object setState
- deal with native object prototyping: properly wrap the 'global' natives!
  - also note the __hasInstance__ and others defined at Fp
- get rid of TRUE in RETURN pushes -> everywhere
- database access methods (if available)
- BLOB file access/local webstorage access
- technique to pass methods directly (kbind has failed!!) (watch out for references that will prevent from garbage-collecting!)
- compiled code? like search for "type_src".o first
- compiled code cache? like copy - not parse every time
- object code parse cache: at least for wakeObject; for createObject too!
- cache parsed code for all security models loaded (hmm.. not all.. some, with stack or smth
- need a method to attach to child errors/system notifications: like if the child of ic dies before exec (also the IPC dedlocks!)
- implement atob/btoa using Orbited's converter wrapper
- check for getChild() ipc(?)object. method to get child ref redirect instead of kernel URI resolution procedure
- check if the values of function parameters not supplied are defined but set to 'undefined' so that || or && notation could be used safely
+ wrapped string operations for base64 using formulas (see g:stackoverflow base64 size) -- done with HEX encoding
- if there are several Blobs in request - transfer chunked data instead of just bare body in many requests; pack the blobs into FormFileTransfer-alike HTTP pieces; parse them chunked in Twisted and send to callee/caller this way
- estimate object memory/fixed storage usage
- properly debug/audit conections
- we need A THOROUGH security discussion!
- reauth for terminal when connection drops (acquire temporary key or do a real reauth when hubConnectionChanged or a kernel method to store AUTH info temporarily)
- propose more terminal independence: do not ACK at HUB but ACK at terminals only; will require a thorough HUB/terminal data protocol review
  IMPORTANT!
- set cache ageing in HAProxy to seconds - for debug - to 1 day - for retail
- introduce debug flag for hub instead of just constantly dumping everything
- pinging HUB does not seem to prevent from session drop :-\ (BUG)
- create in-jeneric unit testing framework and move everything into it (see python unittest module)
- go the twisted.web2 way to handle file uploads :-\
- escape/unescape "Blob("+")" in the STRING data being sent (in the parser/reviver and in hub)
- profile firefox memory leakage; general memory usage
- alternative getChild for more object path resolution control
- write a standard shared library: a shared library is in fact a cloud-based shared method storage. The library may load some code on-demand and will contain wrappers for cloud-based methods
- gears fully autonomous operation vs. portable hub?
- gears 'don't allow' to continue without gears instead of halting (?!?)
kernel programming advisory: be careful with methods that stop the stack - report any possible error via try/catch and stack release w/throw

---------------
- Need additional interface for the ramstore like object LIST method: creation date, file type, FILE LENGTH!!! etc .
- Some additional standard object description methods should also be defined in Jnaric Standard Protocol Proposal (JSPP?)
- A proposal for security description inside the object to allow for security models interoperability and succesful object serialization
- A proposal for security setup and/or MVC model for the security setting.
- The web browser may fail. We should consider different scenarios of what may or should happen.
- Web services/site integration (hidden frame?) (kernel parameters for LOCATION change and restart?)

---------------


JIT: ASM-like (JAM inline snippets - no loops, no calls allowed. Give keywords to yield/loop)
JIT: Ask-To-Call, Ask-To-Iterate (ACAI technique), safe-compile??? (rename globals accessed???)
---------------
things to make work:
http://marijn.haverbeke.nl/codemirror/ http://codepress.sourceforge.net/changelog.php
http://www.openjs.com/scripts/events/keyboard_shortcuts/
http://qooxdoo.org/about
http://www.cdolivet.com/index.php?page=editArea&sess=09ec47cc055fa9d63a6aa765173a1d70
jquery!!
js to jn compiler to successfully compile jquery?!? 

---------------
Higher-level init procedure:
- terminal will pass all its rights on to init that does reside at (some address given in init-string as #init=)
- 

---------------
******
After pre-beta public launch:
Write standards for users and friending, autostart (system init like sysV?), security, storage object interface(entire)

******
Js to jn compiler: compile DOM getters into setAttr..
Study google closurer after all.. Maybe they have a m,mm21pgood compiler ;-)

--------------------------------------------------------------------------------------------------
DOCUMENTATION HINTS

- collect all exceptions/error reports and create exception matrix
- LIPC sending function references and executing them in another vm may result in any unpredicted behaviour (stack mess)
- EOS or POS?
- hub.py is VERY poorly code-designed


---------------


QESTIONS:

- basic security model for ic# and others
- messaging protocols
- listing protocols
- friending protocols
    - friending policies
- sharing protocols
    - passive sync?

- traffic prioritizing/shaping


BUGS:

???? GENERAL PROTOTYPING PROBLEM????? like Object.prototype.fuckingSHIT = shit -> will overlap with another proto!!
  this is a core problem and cannot be addressed; also the SUBJIT will definitely fail here...
  no it wont fail.
BUG: terminal drops connections faster than pinger pings???
     sessions need to be properly debugged!


----------------------------------------


make ALL stack STOPs use the STOP ID!!

